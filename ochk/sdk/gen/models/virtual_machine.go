// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VirtualMachine virtual machine
//
// swagger:model VirtualMachine
type VirtualMachine struct {

	// bios Uuid
	BiosUUID string `json:"biosUuid,omitempty"`

	// computer external Id
	ComputerExternalID string `json:"computerExternalId,omitempty"`

	// computer name
	ComputerName string `json:"computerName,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// host Id
	HostID string `json:"hostId,omitempty"`

	// host location Id
	HostLocationID int32 `json:"hostLocationId,omitempty"`

	// instance Uuid
	InstanceUUID string `json:"instanceUuid,omitempty"`

	// local host
	LocalHost int32 `json:"localHost,omitempty"`

	// location Id
	LocationID string `json:"locationId,omitempty"`

	// mo Id on host
	MoIDOnHost int32 `json:"moIdOnHost,omitempty"`

	// resource type
	ResourceType *ResourceType `json:"resourceType,omitempty"`

	// tags
	Tags []*TagInstance `json:"tags"`

	// virtual machine Id
	VirtualMachineID string `json:"virtualMachineId,omitempty"`

	// virtual machine power state
	VirtualMachinePowerState *VirtualMachinePowerState `json:"virtualMachinePowerState,omitempty"`

	// virtual machine type
	VirtualMachineType *VirtualMachineType `json:"virtualMachineType,omitempty"`

	// virtualmachine o s
	VirtualmachineOS *VirtualMachineOS `json:"virtualmachineOS,omitempty"`
}

// Validate validates this virtual machine
func (m *VirtualMachine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualMachinePowerState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualMachineType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualmachineOS(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachine) validateResourceType(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceType) { // not required
		return nil
	}

	if m.ResourceType != nil {
		if err := m.ResourceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceType")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachine) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachine) validateVirtualMachinePowerState(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualMachinePowerState) { // not required
		return nil
	}

	if m.VirtualMachinePowerState != nil {
		if err := m.VirtualMachinePowerState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualMachinePowerState")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachine) validateVirtualMachineType(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualMachineType) { // not required
		return nil
	}

	if m.VirtualMachineType != nil {
		if err := m.VirtualMachineType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualMachineType")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachine) validateVirtualmachineOS(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualmachineOS) { // not required
		return nil
	}

	if m.VirtualmachineOS != nil {
		if err := m.VirtualmachineOS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualmachineOS")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualMachine) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualMachine) UnmarshalBinary(b []byte) error {
	var res VirtualMachine
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
