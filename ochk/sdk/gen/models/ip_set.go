// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IPSet IP set
//
// swagger:model IPSet
type IPSet struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation date
	CreationDate *Timestamp `json:"creationDate,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// ip set addresses
	IPSetAddresses []*IPSetAddress `json:"ipSetAddresses"`

	// ip set Id
	IPSetID string `json:"ipSetId,omitempty"`

	// modification date
	ModificationDate *Timestamp `json:"modificationDate,omitempty"`

	// modified by
	ModifiedBy string `json:"modifiedBy,omitempty"`
}

// Validate validates this IP set
func (m *IPSet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPSetAddresses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPSet) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if m.CreationDate != nil {
		if err := m.CreationDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creationDate")
			}
			return err
		}
	}

	return nil
}

func (m *IPSet) validateIPSetAddresses(formats strfmt.Registry) error {

	if swag.IsZero(m.IPSetAddresses) { // not required
		return nil
	}

	for i := 0; i < len(m.IPSetAddresses); i++ {
		if swag.IsZero(m.IPSetAddresses[i]) { // not required
			continue
		}

		if m.IPSetAddresses[i] != nil {
			if err := m.IPSetAddresses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipSetAddresses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IPSet) validateModificationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ModificationDate) { // not required
		return nil
	}

	if m.ModificationDate != nil {
		if err := m.ModificationDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("modificationDate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPSet) UnmarshalBinary(b []byte) error {
	var res IPSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
