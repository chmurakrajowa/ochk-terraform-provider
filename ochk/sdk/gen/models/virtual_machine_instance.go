// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualMachineInstance VirtualMachineInstance
//
// swagger:model VirtualMachineInstance
type VirtualMachineInstance struct {

	// cpu count
	CPUCount int64 `json:"cpuCount,omitempty"`

	// memory size m b
	MemorySizeMB int64 `json:"memorySizeMB,omitempty"`

	// network interface instance collection
	NetworkInterfaceInstanceCollection []*NetworkInterfaceInstance `json:"networkInterfaceInstanceCollection"`

	// power state
	// Enum: [POWERED_OFF POWERED_ON SUSPENDED]
	PowerState string `json:"powerState,omitempty"`

	// virtual machine Id
	VirtualMachineID string `json:"virtualMachineId,omitempty"`

	// virtual machine name
	VirtualMachineName string `json:"virtualMachineName,omitempty"`
}

// Validate validates this virtual machine instance
func (m *VirtualMachineInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkInterfaceInstanceCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineInstance) validateNetworkInterfaceInstanceCollection(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkInterfaceInstanceCollection) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkInterfaceInstanceCollection); i++ {
		if swag.IsZero(m.NetworkInterfaceInstanceCollection[i]) { // not required
			continue
		}

		if m.NetworkInterfaceInstanceCollection[i] != nil {
			if err := m.NetworkInterfaceInstanceCollection[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkInterfaceInstanceCollection" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var virtualMachineInstanceTypePowerStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["POWERED_OFF","POWERED_ON","SUSPENDED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualMachineInstanceTypePowerStatePropEnum = append(virtualMachineInstanceTypePowerStatePropEnum, v)
	}
}

const (

	// VirtualMachineInstancePowerStatePOWEREDOFF captures enum value "POWERED_OFF"
	VirtualMachineInstancePowerStatePOWEREDOFF string = "POWERED_OFF"

	// VirtualMachineInstancePowerStatePOWEREDON captures enum value "POWERED_ON"
	VirtualMachineInstancePowerStatePOWEREDON string = "POWERED_ON"

	// VirtualMachineInstancePowerStateSUSPENDED captures enum value "SUSPENDED"
	VirtualMachineInstancePowerStateSUSPENDED string = "SUSPENDED"
)

// prop value enum
func (m *VirtualMachineInstance) validatePowerStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, virtualMachineInstanceTypePowerStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VirtualMachineInstance) validatePowerState(formats strfmt.Registry) error {

	if swag.IsZero(m.PowerState) { // not required
		return nil
	}

	// value enum
	if err := m.validatePowerStateEnum("powerState", "body", m.PowerState); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualMachineInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualMachineInstance) UnmarshalBinary(b []byte) error {
	var res VirtualMachineInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
