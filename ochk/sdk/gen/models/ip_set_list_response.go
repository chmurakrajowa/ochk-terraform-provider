// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IPSetListResponse IP set list response
//
// swagger:model IPSetListResponse
type IPSetListResponse struct {

	// ip set collection
	IPSetCollection []*IPSet `json:"ipSetCollection"`

	// messages
	Messages string `json:"messages,omitempty"`

	// success
	Success bool `json:"success,omitempty"`

	// timestamp
	Timestamp *Timestamp `json:"timestamp,omitempty"`
}

// Validate validates this IP set list response
func (m *IPSetListResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPSetCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPSetListResponse) validateIPSetCollection(formats strfmt.Registry) error {

	if swag.IsZero(m.IPSetCollection) { // not required
		return nil
	}

	for i := 0; i < len(m.IPSetCollection); i++ {
		if swag.IsZero(m.IPSetCollection[i]) { // not required
			continue
		}

		if m.IPSetCollection[i] != nil {
			if err := m.IPSetCollection[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ipSetCollection" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IPSetListResponse) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if m.Timestamp != nil {
		if err := m.Timestamp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timestamp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPSetListResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPSetListResponse) UnmarshalBinary(b []byte) error {
	var res IPSetListResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
