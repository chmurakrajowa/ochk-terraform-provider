// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LogicalPort logical port
//
// swagger:model LogicalPort
type LogicalPort struct {

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// logical port admin state
	LogicalPortAdminState *LogicalPortAdminState `json:"logicalPortAdminState,omitempty"`

	// logical port Id
	LogicalPortID string `json:"logicalPortId,omitempty"`

	// resource type
	ResourceType *ResourceType `json:"resourceType,omitempty"`

	// tags
	Tags []*TagInstance `json:"tags"`
}

// Validate validates this logical port
func (m *LogicalPort) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogicalPortAdminState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogicalPort) validateLogicalPortAdminState(formats strfmt.Registry) error {

	if swag.IsZero(m.LogicalPortAdminState) { // not required
		return nil
	}

	if m.LogicalPortAdminState != nil {
		if err := m.LogicalPortAdminState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logicalPortAdminState")
			}
			return err
		}
	}

	return nil
}

func (m *LogicalPort) validateResourceType(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceType) { // not required
		return nil
	}

	if m.ResourceType != nil {
		if err := m.ResourceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceType")
			}
			return err
		}
	}

	return nil
}

func (m *LogicalPort) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogicalPort) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogicalPort) UnmarshalBinary(b []byte) error {
	var res LogicalPort
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
