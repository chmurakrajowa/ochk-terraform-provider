// Code generated by go-swagger; DO NOT EDIT.

package security_policy_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/models"
)

// GetUsingGET4Reader is a Reader for the GetUsingGET4 structure.
type GetUsingGET4Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUsingGET4Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUsingGET4OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetUsingGET4Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUsingGET4Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUsingGET4NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetUsingGET4OK creates a GetUsingGET4OK with default headers values
func NewGetUsingGET4OK() *GetUsingGET4OK {
	return &GetUsingGET4OK{}
}

/*GetUsingGET4OK handles this case with default header values.

OK
*/
type GetUsingGET4OK struct {
	Payload *models.SecurityPolicyGetResponse
}

func (o *GetUsingGET4OK) Error() string {
	return fmt.Sprintf("[GET /nsx/fw/sp/{SecurityPolicyId}][%d] getUsingGET4OK  %+v", 200, o.Payload)
}

func (o *GetUsingGET4OK) GetPayload() *models.SecurityPolicyGetResponse {
	return o.Payload
}

func (o *GetUsingGET4OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SecurityPolicyGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsingGET4Unauthorized creates a GetUsingGET4Unauthorized with default headers values
func NewGetUsingGET4Unauthorized() *GetUsingGET4Unauthorized {
	return &GetUsingGET4Unauthorized{}
}

/*GetUsingGET4Unauthorized handles this case with default header values.

Unauthorized
*/
type GetUsingGET4Unauthorized struct {
}

func (o *GetUsingGET4Unauthorized) Error() string {
	return fmt.Sprintf("[GET /nsx/fw/sp/{SecurityPolicyId}][%d] getUsingGET4Unauthorized ", 401)
}

func (o *GetUsingGET4Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUsingGET4Forbidden creates a GetUsingGET4Forbidden with default headers values
func NewGetUsingGET4Forbidden() *GetUsingGET4Forbidden {
	return &GetUsingGET4Forbidden{}
}

/*GetUsingGET4Forbidden handles this case with default header values.

Forbidden
*/
type GetUsingGET4Forbidden struct {
}

func (o *GetUsingGET4Forbidden) Error() string {
	return fmt.Sprintf("[GET /nsx/fw/sp/{SecurityPolicyId}][%d] getUsingGET4Forbidden ", 403)
}

func (o *GetUsingGET4Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetUsingGET4NotFound creates a GetUsingGET4NotFound with default headers values
func NewGetUsingGET4NotFound() *GetUsingGET4NotFound {
	return &GetUsingGET4NotFound{}
}

/*GetUsingGET4NotFound handles this case with default header values.

Not Found
*/
type GetUsingGET4NotFound struct {
}

func (o *GetUsingGET4NotFound) Error() string {
	return fmt.Sprintf("[GET /nsx/fw/sp/{SecurityPolicyId}][%d] getUsingGET4NotFound ", 404)
}

func (o *GetUsingGET4NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
