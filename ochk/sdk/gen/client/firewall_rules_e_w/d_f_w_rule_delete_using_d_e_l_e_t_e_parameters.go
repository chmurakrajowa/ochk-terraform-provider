// Code generated by go-swagger; DO NOT EDIT.

package firewall_rules_e_w

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDFWRuleDeleteUsingDELETEParams creates a new DFWRuleDeleteUsingDELETEParams object
// with the default values initialized.
func NewDFWRuleDeleteUsingDELETEParams() *DFWRuleDeleteUsingDELETEParams {
	var ()
	return &DFWRuleDeleteUsingDELETEParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDFWRuleDeleteUsingDELETEParamsWithTimeout creates a new DFWRuleDeleteUsingDELETEParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDFWRuleDeleteUsingDELETEParamsWithTimeout(timeout time.Duration) *DFWRuleDeleteUsingDELETEParams {
	var ()
	return &DFWRuleDeleteUsingDELETEParams{

		timeout: timeout,
	}
}

// NewDFWRuleDeleteUsingDELETEParamsWithContext creates a new DFWRuleDeleteUsingDELETEParams object
// with the default values initialized, and the ability to set a context for a request
func NewDFWRuleDeleteUsingDELETEParamsWithContext(ctx context.Context) *DFWRuleDeleteUsingDELETEParams {
	var ()
	return &DFWRuleDeleteUsingDELETEParams{

		Context: ctx,
	}
}

// NewDFWRuleDeleteUsingDELETEParamsWithHTTPClient creates a new DFWRuleDeleteUsingDELETEParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDFWRuleDeleteUsingDELETEParamsWithHTTPClient(client *http.Client) *DFWRuleDeleteUsingDELETEParams {
	var ()
	return &DFWRuleDeleteUsingDELETEParams{
		HTTPClient: client,
	}
}

/*DFWRuleDeleteUsingDELETEParams contains all the parameters to send to the API endpoint
for the d f w rule delete using d e l e t e operation typically these are written to a http.Request
*/
type DFWRuleDeleteUsingDELETEParams struct {

	/*RuleID
	  RuleId

	*/
	RuleID string
	/*SecurityPolicyID
	  SecurityPolicyId

	*/
	SecurityPolicyID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the d f w rule delete using d e l e t e params
func (o *DFWRuleDeleteUsingDELETEParams) WithTimeout(timeout time.Duration) *DFWRuleDeleteUsingDELETEParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the d f w rule delete using d e l e t e params
func (o *DFWRuleDeleteUsingDELETEParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the d f w rule delete using d e l e t e params
func (o *DFWRuleDeleteUsingDELETEParams) WithContext(ctx context.Context) *DFWRuleDeleteUsingDELETEParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the d f w rule delete using d e l e t e params
func (o *DFWRuleDeleteUsingDELETEParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the d f w rule delete using d e l e t e params
func (o *DFWRuleDeleteUsingDELETEParams) WithHTTPClient(client *http.Client) *DFWRuleDeleteUsingDELETEParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the d f w rule delete using d e l e t e params
func (o *DFWRuleDeleteUsingDELETEParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRuleID adds the ruleID to the d f w rule delete using d e l e t e params
func (o *DFWRuleDeleteUsingDELETEParams) WithRuleID(ruleID string) *DFWRuleDeleteUsingDELETEParams {
	o.SetRuleID(ruleID)
	return o
}

// SetRuleID adds the ruleId to the d f w rule delete using d e l e t e params
func (o *DFWRuleDeleteUsingDELETEParams) SetRuleID(ruleID string) {
	o.RuleID = ruleID
}

// WithSecurityPolicyID adds the securityPolicyID to the d f w rule delete using d e l e t e params
func (o *DFWRuleDeleteUsingDELETEParams) WithSecurityPolicyID(securityPolicyID string) *DFWRuleDeleteUsingDELETEParams {
	o.SetSecurityPolicyID(securityPolicyID)
	return o
}

// SetSecurityPolicyID adds the securityPolicyId to the d f w rule delete using d e l e t e params
func (o *DFWRuleDeleteUsingDELETEParams) SetSecurityPolicyID(securityPolicyID string) {
	o.SecurityPolicyID = securityPolicyID
}

// WriteToRequest writes these params to a swagger request
func (o *DFWRuleDeleteUsingDELETEParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param RuleId
	if err := r.SetPathParam("RuleId", o.RuleID); err != nil {
		return err
	}

	// path param SecurityPolicyId
	if err := r.SetPathParam("SecurityPolicyId", o.SecurityPolicyID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
