// Code generated by go-swagger; DO NOT EDIT.

package firewall_rules_e_w

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new firewall rules e w API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for firewall rules e w API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DFWRuleCreateUsingPUT(params *DFWRuleCreateUsingPUTParams) (*DFWRuleCreateUsingPUTOK, *DFWRuleCreateUsingPUTCreated, error)

	DFWRuleDeleteUsingDELETE(params *DFWRuleDeleteUsingDELETEParams) (*DFWRuleDeleteUsingDELETEOK, error)

	DFWRuleGetUsingGET(params *DFWRuleGetUsingGETParams) (*DFWRuleGetUsingGETOK, error)

	DFWRuleListUsingGET(params *DFWRuleListUsingGETParams) (*DFWRuleListUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DFWRuleCreateUsingPUT creates

  Create firewall rule (east-west) in NSX-T
*/
func (a *Client) DFWRuleCreateUsingPUT(params *DFWRuleCreateUsingPUTParams) (*DFWRuleCreateUsingPUTOK, *DFWRuleCreateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDFWRuleCreateUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DFWRuleCreateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/network/firewall/security-policies/{SecurityPolicyId}/rules/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DFWRuleCreateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DFWRuleCreateUsingPUTOK:
		return value, nil, nil
	case *DFWRuleCreateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for firewall_rules_e_w: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DFWRuleDeleteUsingDELETE deletes

  Delete firewall rule (east-west) from NSX-T
*/
func (a *Client) DFWRuleDeleteUsingDELETE(params *DFWRuleDeleteUsingDELETEParams) (*DFWRuleDeleteUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDFWRuleDeleteUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DFWRuleDeleteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/network/firewall/security-policies/{SecurityPolicyId}/rules/{RuleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DFWRuleDeleteUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DFWRuleDeleteUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DFWRuleDeleteUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DFWRuleGetUsingGET gets

  Get firewall rule (east-west) from NSX-T
*/
func (a *Client) DFWRuleGetUsingGET(params *DFWRuleGetUsingGETParams) (*DFWRuleGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDFWRuleGetUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DFWRuleGetUsingGET",
		Method:             "GET",
		PathPattern:        "/network/firewall/security-policies/{SecurityPolicyId}/rules/{RuleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DFWRuleGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DFWRuleGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DFWRuleGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DFWRuleListUsingGET lists

  List firewall rules (east-west) from NSX-T
*/
func (a *Client) DFWRuleListUsingGET(params *DFWRuleListUsingGETParams) (*DFWRuleListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDFWRuleListUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DFWRuleListUsingGET",
		Method:             "GET",
		PathPattern:        "/network/firewall/security-policies/{securityPolicyId}/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DFWRuleListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DFWRuleListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DFWRuleListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
