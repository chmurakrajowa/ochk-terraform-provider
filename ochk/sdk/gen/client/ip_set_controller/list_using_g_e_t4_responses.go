// Code generated by go-swagger; DO NOT EDIT.

package ip_set_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/models"
)

// ListUsingGET4Reader is a Reader for the ListUsingGET4 structure.
type ListUsingGET4Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListUsingGET4Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListUsingGET4OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListUsingGET4Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListUsingGET4Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListUsingGET4NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListUsingGET4OK creates a ListUsingGET4OK with default headers values
func NewListUsingGET4OK() *ListUsingGET4OK {
	return &ListUsingGET4OK{}
}

/*ListUsingGET4OK handles this case with default header values.

OK
*/
type ListUsingGET4OK struct {
	Payload *models.IPSetListResponse
}

func (o *ListUsingGET4OK) Error() string {
	return fmt.Sprintf("[GET /nsx/ips/][%d] listUsingGET4OK  %+v", 200, o.Payload)
}

func (o *ListUsingGET4OK) GetPayload() *models.IPSetListResponse {
	return o.Payload
}

func (o *ListUsingGET4OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IPSetListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsingGET4Unauthorized creates a ListUsingGET4Unauthorized with default headers values
func NewListUsingGET4Unauthorized() *ListUsingGET4Unauthorized {
	return &ListUsingGET4Unauthorized{}
}

/*ListUsingGET4Unauthorized handles this case with default header values.

Unauthorized
*/
type ListUsingGET4Unauthorized struct {
}

func (o *ListUsingGET4Unauthorized) Error() string {
	return fmt.Sprintf("[GET /nsx/ips/][%d] listUsingGET4Unauthorized ", 401)
}

func (o *ListUsingGET4Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUsingGET4Forbidden creates a ListUsingGET4Forbidden with default headers values
func NewListUsingGET4Forbidden() *ListUsingGET4Forbidden {
	return &ListUsingGET4Forbidden{}
}

/*ListUsingGET4Forbidden handles this case with default header values.

Forbidden
*/
type ListUsingGET4Forbidden struct {
}

func (o *ListUsingGET4Forbidden) Error() string {
	return fmt.Sprintf("[GET /nsx/ips/][%d] listUsingGET4Forbidden ", 403)
}

func (o *ListUsingGET4Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUsingGET4NotFound creates a ListUsingGET4NotFound with default headers values
func NewListUsingGET4NotFound() *ListUsingGET4NotFound {
	return &ListUsingGET4NotFound{}
}

/*ListUsingGET4NotFound handles this case with default header values.

Not Found
*/
type ListUsingGET4NotFound struct {
}

func (o *ListUsingGET4NotFound) Error() string {
	return fmt.Sprintf("[GET /nsx/ips/][%d] listUsingGET4NotFound ", 404)
}

func (o *ListUsingGET4NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
