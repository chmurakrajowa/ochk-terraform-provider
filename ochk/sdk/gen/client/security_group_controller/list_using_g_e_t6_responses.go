// Code generated by go-swagger; DO NOT EDIT.

package security_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/models"
)

// ListUsingGET6Reader is a Reader for the ListUsingGET6 structure.
type ListUsingGET6Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListUsingGET6Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListUsingGET6OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListUsingGET6Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListUsingGET6Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListUsingGET6NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListUsingGET6OK creates a ListUsingGET6OK with default headers values
func NewListUsingGET6OK() *ListUsingGET6OK {
	return &ListUsingGET6OK{}
}

/*ListUsingGET6OK handles this case with default header values.

OK
*/
type ListUsingGET6OK struct {
	Payload *models.SecurityGroupListResponse
}

func (o *ListUsingGET6OK) Error() string {
	return fmt.Sprintf("[GET /nsx/sg/][%d] listUsingGET6OK  %+v", 200, o.Payload)
}

func (o *ListUsingGET6OK) GetPayload() *models.SecurityGroupListResponse {
	return o.Payload
}

func (o *ListUsingGET6OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SecurityGroupListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsingGET6Unauthorized creates a ListUsingGET6Unauthorized with default headers values
func NewListUsingGET6Unauthorized() *ListUsingGET6Unauthorized {
	return &ListUsingGET6Unauthorized{}
}

/*ListUsingGET6Unauthorized handles this case with default header values.

Unauthorized
*/
type ListUsingGET6Unauthorized struct {
}

func (o *ListUsingGET6Unauthorized) Error() string {
	return fmt.Sprintf("[GET /nsx/sg/][%d] listUsingGET6Unauthorized ", 401)
}

func (o *ListUsingGET6Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUsingGET6Forbidden creates a ListUsingGET6Forbidden with default headers values
func NewListUsingGET6Forbidden() *ListUsingGET6Forbidden {
	return &ListUsingGET6Forbidden{}
}

/*ListUsingGET6Forbidden handles this case with default header values.

Forbidden
*/
type ListUsingGET6Forbidden struct {
}

func (o *ListUsingGET6Forbidden) Error() string {
	return fmt.Sprintf("[GET /nsx/sg/][%d] listUsingGET6Forbidden ", 403)
}

func (o *ListUsingGET6Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUsingGET6NotFound creates a ListUsingGET6NotFound with default headers values
func NewListUsingGET6NotFound() *ListUsingGET6NotFound {
	return &ListUsingGET6NotFound{}
}

/*ListUsingGET6NotFound handles this case with default header values.

Not Found
*/
type ListUsingGET6NotFound struct {
}

func (o *ListUsingGET6NotFound) Error() string {
	return fmt.Sprintf("[GET /nsx/sg/][%d] listUsingGET6NotFound ", 404)
}

func (o *ListUsingGET6NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
