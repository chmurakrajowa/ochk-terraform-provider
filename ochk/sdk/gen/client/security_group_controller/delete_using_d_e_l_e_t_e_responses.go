// Code generated by go-swagger; DO NOT EDIT.

package security_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/models"
)

// DeleteUsingDELETEReader is a Reader for the DeleteUsingDELETE structure.
type DeleteUsingDELETEReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteUsingDELETEReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteUsingDELETEOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteUsingDELETENoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteUsingDELETEUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteUsingDELETEForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteUsingDELETEOK creates a DeleteUsingDELETEOK with default headers values
func NewDeleteUsingDELETEOK() *DeleteUsingDELETEOK {
	return &DeleteUsingDELETEOK{}
}

/*DeleteUsingDELETEOK handles this case with default header values.

OK
*/
type DeleteUsingDELETEOK struct {
	Payload *models.DeleteResponse
}

func (o *DeleteUsingDELETEOK) Error() string {
	return fmt.Sprintf("[DELETE /nsx/sg/{GroupId}][%d] deleteUsingDELETEOK  %+v", 200, o.Payload)
}

func (o *DeleteUsingDELETEOK) GetPayload() *models.DeleteResponse {
	return o.Payload
}

func (o *DeleteUsingDELETEOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteUsingDELETENoContent creates a DeleteUsingDELETENoContent with default headers values
func NewDeleteUsingDELETENoContent() *DeleteUsingDELETENoContent {
	return &DeleteUsingDELETENoContent{}
}

/*DeleteUsingDELETENoContent handles this case with default header values.

No Content
*/
type DeleteUsingDELETENoContent struct {
}

func (o *DeleteUsingDELETENoContent) Error() string {
	return fmt.Sprintf("[DELETE /nsx/sg/{GroupId}][%d] deleteUsingDELETENoContent ", 204)
}

func (o *DeleteUsingDELETENoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteUsingDELETEUnauthorized creates a DeleteUsingDELETEUnauthorized with default headers values
func NewDeleteUsingDELETEUnauthorized() *DeleteUsingDELETEUnauthorized {
	return &DeleteUsingDELETEUnauthorized{}
}

/*DeleteUsingDELETEUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteUsingDELETEUnauthorized struct {
}

func (o *DeleteUsingDELETEUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /nsx/sg/{GroupId}][%d] deleteUsingDELETEUnauthorized ", 401)
}

func (o *DeleteUsingDELETEUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteUsingDELETEForbidden creates a DeleteUsingDELETEForbidden with default headers values
func NewDeleteUsingDELETEForbidden() *DeleteUsingDELETEForbidden {
	return &DeleteUsingDELETEForbidden{}
}

/*DeleteUsingDELETEForbidden handles this case with default header values.

Forbidden
*/
type DeleteUsingDELETEForbidden struct {
}

func (o *DeleteUsingDELETEForbidden) Error() string {
	return fmt.Sprintf("[DELETE /nsx/sg/{GroupId}][%d] deleteUsingDELETEForbidden ", 403)
}

func (o *DeleteUsingDELETEForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
