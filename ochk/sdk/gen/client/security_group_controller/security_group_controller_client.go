// Code generated by go-swagger; DO NOT EDIT.

package security_group_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new security group controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for security group controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateUsingPUT(params *CreateUsingPUTParams) (*CreateUsingPUTOK, *CreateUsingPUTCreated, error)

	DeleteUsingDELETE(params *DeleteUsingDELETEParams) (*DeleteUsingDELETEOK, *DeleteUsingDELETENoContent, error)

	GetUsingGET3(params *GetUsingGET3Params) (*GetUsingGET3OK, error)

	ListUsingGET6(params *ListUsingGET6Params) (*ListUsingGET6OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateUsingPUT creates
*/
func (a *Client) CreateUsingPUT(params *CreateUsingPUTParams) (*CreateUsingPUTOK, *CreateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/nsx/sg/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateUsingPUTOK:
		return value, nil, nil
	case *CreateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for security_group_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUsingDELETE deletes
*/
func (a *Client) DeleteUsingDELETE(params *DeleteUsingDELETEParams) (*DeleteUsingDELETEOK, *DeleteUsingDELETENoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/nsx/sg/{GroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteUsingDELETEOK:
		return value, nil, nil
	case *DeleteUsingDELETENoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for security_group_controller: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUsingGET3 gets
*/
func (a *Client) GetUsingGET3(params *GetUsingGET3Params) (*GetUsingGET3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsingGET3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsingGET_3",
		Method:             "GET",
		PathPattern:        "/nsx/sg/{GroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUsingGET3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsingGET3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetUsingGET_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListUsingGET6 lists
*/
func (a *Client) ListUsingGET6(params *ListUsingGET6Params) (*ListUsingGET6OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUsingGET6Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListUsingGET_6",
		Method:             "GET",
		PathPattern:        "/nsx/sg/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListUsingGET6Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUsingGET6OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListUsingGET_6: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
