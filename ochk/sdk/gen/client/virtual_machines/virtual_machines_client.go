// Code generated by go-swagger; DO NOT EDIT.

package virtual_machines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new virtual machines API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for virtual machines API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	VcsVirtualMachineGroupGetUsingGET1(params *VcsVirtualMachineGroupGetUsingGET1Params) (*VcsVirtualMachineGroupGetUsingGET1OK, error)

	VcsVirtualMachineListUsingGET1(params *VcsVirtualMachineListUsingGET1Params) (*VcsVirtualMachineListUsingGET1OK, error)

	VirtualMachineGetUsingGET(params *VirtualMachineGetUsingGETParams) (*VirtualMachineGetUsingGETOK, error)

	VirtualMachineListUsingGET(params *VirtualMachineListUsingGETParams) (*VirtualMachineListUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  VcsVirtualMachineGroupGetUsingGET1 gets

  Get vSphere vCenter virtual machine
*/
func (a *Client) VcsVirtualMachineGroupGetUsingGET1(params *VcsVirtualMachineGroupGetUsingGET1Params) (*VcsVirtualMachineGroupGetUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVcsVirtualMachineGroupGetUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VcsVirtualMachineGroupGetUsingGET_1",
		Method:             "GET",
		PathPattern:        "/vcs/virtual-machines/{virtualMachineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VcsVirtualMachineGroupGetUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VcsVirtualMachineGroupGetUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VcsVirtualMachineGroupGetUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VcsVirtualMachineListUsingGET1 lists

  List vSphere vCenter virtual machines
*/
func (a *Client) VcsVirtualMachineListUsingGET1(params *VcsVirtualMachineListUsingGET1Params) (*VcsVirtualMachineListUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVcsVirtualMachineListUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VcsVirtualMachineListUsingGET_1",
		Method:             "GET",
		PathPattern:        "/vcs/virtual-machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VcsVirtualMachineListUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VcsVirtualMachineListUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VcsVirtualMachineListUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VirtualMachineGetUsingGET gets

  Get virtual machine from NSX-T
*/
func (a *Client) VirtualMachineGetUsingGET(params *VirtualMachineGetUsingGETParams) (*VirtualMachineGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualMachineGetUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualMachineGetUsingGET",
		Method:             "GET",
		PathPattern:        "/network/virtual-machines/{virtualMachineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualMachineGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VirtualMachineGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VirtualMachineGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  VirtualMachineListUsingGET lists virtual machines

  List virtual machines from NSX-T level
*/
func (a *Client) VirtualMachineListUsingGET(params *VirtualMachineListUsingGETParams) (*VirtualMachineListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVirtualMachineListUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "VirtualMachineListUsingGET",
		Method:             "GET",
		PathPattern:        "/network/virtual-machines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VirtualMachineListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VirtualMachineListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for VirtualMachineListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
