// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/context_profiles"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/default_services"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/edge_clusters"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/firewall_rules_e_w"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/firewall_rules_s_n"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/gateway_policies"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/ip_collection"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/ip_sets"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/logical_ports"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/networkadapters"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/networkprofiles"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/networks"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/principals"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/requests"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/reservations"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/resource_pools"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/routers"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/security_groups"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/security_policies"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/subtenants"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/users"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/v_id_m"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/virtual_machines"
	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/client/virtual_networks"
)

// Default ochk HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "iaas-api-proxy.ochk.pilot"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new ochk HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Ochk {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new ochk HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Ochk {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new ochk client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Ochk {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Ochk)
	cli.Transport = transport
	cli.ContextProfiles = context_profiles.New(transport, formats)
	cli.DefaultServices = default_services.New(transport, formats)
	cli.EdgeClusters = edge_clusters.New(transport, formats)
	cli.FirewallRulesew = firewall_rules_e_w.New(transport, formats)
	cli.FirewallRulessn = firewall_rules_s_n.New(transport, formats)
	cli.GatewayPolicies = gateway_policies.New(transport, formats)
	cli.IPCollection = ip_collection.New(transport, formats)
	cli.IPSets = ip_sets.New(transport, formats)
	cli.LogicalPorts = logical_ports.New(transport, formats)
	cli.Networkadapters = networkadapters.New(transport, formats)
	cli.Networkprofiles = networkprofiles.New(transport, formats)
	cli.Networks = networks.New(transport, formats)
	cli.Principals = principals.New(transport, formats)
	cli.Requests = requests.New(transport, formats)
	cli.Reservations = reservations.New(transport, formats)
	cli.ResourcePools = resource_pools.New(transport, formats)
	cli.Routers = routers.New(transport, formats)
	cli.SecurityGroups = security_groups.New(transport, formats)
	cli.SecurityPolicies = security_policies.New(transport, formats)
	cli.Subtenants = subtenants.New(transport, formats)
	cli.Users = users.New(transport, formats)
	cli.VIDm = v_id_m.New(transport, formats)
	cli.VirtualMachines = virtual_machines.New(transport, formats)
	cli.VirtualNetworks = virtual_networks.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Ochk is a client for ochk
type Ochk struct {
	ContextProfiles context_profiles.ClientService

	DefaultServices default_services.ClientService

	EdgeClusters edge_clusters.ClientService

	FirewallRulesew firewall_rules_e_w.ClientService

	FirewallRulessn firewall_rules_s_n.ClientService

	GatewayPolicies gateway_policies.ClientService

	IPCollection ip_collection.ClientService

	IPSets ip_sets.ClientService

	LogicalPorts logical_ports.ClientService

	Networkadapters networkadapters.ClientService

	Networkprofiles networkprofiles.ClientService

	Networks networks.ClientService

	Principals principals.ClientService

	Requests requests.ClientService

	Reservations reservations.ClientService

	ResourcePools resource_pools.ClientService

	Routers routers.ClientService

	SecurityGroups security_groups.ClientService

	SecurityPolicies security_policies.ClientService

	Subtenants subtenants.ClientService

	Users users.ClientService

	VIDm v_id_m.ClientService

	VirtualMachines virtual_machines.ClientService

	VirtualNetworks virtual_networks.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Ochk) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.ContextProfiles.SetTransport(transport)
	c.DefaultServices.SetTransport(transport)
	c.EdgeClusters.SetTransport(transport)
	c.FirewallRulesew.SetTransport(transport)
	c.FirewallRulessn.SetTransport(transport)
	c.GatewayPolicies.SetTransport(transport)
	c.IPCollection.SetTransport(transport)
	c.IPSets.SetTransport(transport)
	c.LogicalPorts.SetTransport(transport)
	c.Networkadapters.SetTransport(transport)
	c.Networkprofiles.SetTransport(transport)
	c.Networks.SetTransport(transport)
	c.Principals.SetTransport(transport)
	c.Requests.SetTransport(transport)
	c.Reservations.SetTransport(transport)
	c.ResourcePools.SetTransport(transport)
	c.Routers.SetTransport(transport)
	c.SecurityGroups.SetTransport(transport)
	c.SecurityPolicies.SetTransport(transport)
	c.Subtenants.SetTransport(transport)
	c.Users.SetTransport(transport)
	c.VIDm.SetTransport(transport)
	c.VirtualMachines.SetTransport(transport)
	c.VirtualNetworks.SetTransport(transport)
}
