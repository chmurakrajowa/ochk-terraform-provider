// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/client/auth_controller"
	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/client/context_profile_controller"
	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/client/dfw_rule_controller"
	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/client/gateway_policy_controller"
	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/client/gfw_rule_controller"
	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/client/ip_set_controller"
	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/client/logical_port_controller"
	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/client/request_controller"
	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/client/security_group_controller"
	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/client/security_policy_controller"
	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/client/service_controller"
	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/client/virtual_machine_controller"
)

// Default ochk HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "iaas-api-core.ochk.pilot"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new ochk HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Ochk {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new ochk HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Ochk {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new ochk client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Ochk {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Ochk)
	cli.Transport = transport
	cli.AuthController = auth_controller.New(transport, formats)
	cli.ContextProfileController = context_profile_controller.New(transport, formats)
	cli.DfwRuleController = dfw_rule_controller.New(transport, formats)
	cli.GatewayPolicyController = gateway_policy_controller.New(transport, formats)
	cli.GfwRuleController = gfw_rule_controller.New(transport, formats)
	cli.IPSetController = ip_set_controller.New(transport, formats)
	cli.LogicalPortController = logical_port_controller.New(transport, formats)
	cli.RequestController = request_controller.New(transport, formats)
	cli.SecurityGroupController = security_group_controller.New(transport, formats)
	cli.SecurityPolicyController = security_policy_controller.New(transport, formats)
	cli.ServiceController = service_controller.New(transport, formats)
	cli.VirtualMachineController = virtual_machine_controller.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Ochk is a client for ochk
type Ochk struct {
	AuthController auth_controller.ClientService

	ContextProfileController context_profile_controller.ClientService

	DfwRuleController dfw_rule_controller.ClientService

	GatewayPolicyController gateway_policy_controller.ClientService

	GfwRuleController gfw_rule_controller.ClientService

	IPSetController ip_set_controller.ClientService

	LogicalPortController logical_port_controller.ClientService

	RequestController request_controller.ClientService

	SecurityGroupController security_group_controller.ClientService

	SecurityPolicyController security_policy_controller.ClientService

	ServiceController service_controller.ClientService

	VirtualMachineController virtual_machine_controller.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Ochk) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.AuthController.SetTransport(transport)
	c.ContextProfileController.SetTransport(transport)
	c.DfwRuleController.SetTransport(transport)
	c.GatewayPolicyController.SetTransport(transport)
	c.GfwRuleController.SetTransport(transport)
	c.IPSetController.SetTransport(transport)
	c.LogicalPortController.SetTransport(transport)
	c.RequestController.SetTransport(transport)
	c.SecurityGroupController.SetTransport(transport)
	c.SecurityPolicyController.SetTransport(transport)
	c.ServiceController.SetTransport(transport)
	c.VirtualMachineController.SetTransport(transport)
}
