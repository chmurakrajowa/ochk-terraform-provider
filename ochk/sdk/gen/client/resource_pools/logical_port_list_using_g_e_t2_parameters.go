// Code generated by go-swagger; DO NOT EDIT.

package resource_pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewLogicalPortListUsingGET2Params creates a new LogicalPortListUsingGET2Params object
// with the default values initialized.
func NewLogicalPortListUsingGET2Params() *LogicalPortListUsingGET2Params {
	var ()
	return &LogicalPortListUsingGET2Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewLogicalPortListUsingGET2ParamsWithTimeout creates a new LogicalPortListUsingGET2Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewLogicalPortListUsingGET2ParamsWithTimeout(timeout time.Duration) *LogicalPortListUsingGET2Params {
	var ()
	return &LogicalPortListUsingGET2Params{

		timeout: timeout,
	}
}

// NewLogicalPortListUsingGET2ParamsWithContext creates a new LogicalPortListUsingGET2Params object
// with the default values initialized, and the ability to set a context for a request
func NewLogicalPortListUsingGET2ParamsWithContext(ctx context.Context) *LogicalPortListUsingGET2Params {
	var ()
	return &LogicalPortListUsingGET2Params{

		Context: ctx,
	}
}

// NewLogicalPortListUsingGET2ParamsWithHTTPClient creates a new LogicalPortListUsingGET2Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLogicalPortListUsingGET2ParamsWithHTTPClient(client *http.Client) *LogicalPortListUsingGET2Params {
	var ()
	return &LogicalPortListUsingGET2Params{
		HTTPClient: client,
	}
}

/*LogicalPortListUsingGET2Params contains all the parameters to send to the API endpoint
for the logical port list using g e t 2 operation typically these are written to a http.Request
*/
type LogicalPortListUsingGET2Params struct {

	/*ResourcePoolName
	  resourcePoolName

	*/
	ResourcePoolName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the logical port list using g e t 2 params
func (o *LogicalPortListUsingGET2Params) WithTimeout(timeout time.Duration) *LogicalPortListUsingGET2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the logical port list using g e t 2 params
func (o *LogicalPortListUsingGET2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the logical port list using g e t 2 params
func (o *LogicalPortListUsingGET2Params) WithContext(ctx context.Context) *LogicalPortListUsingGET2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the logical port list using g e t 2 params
func (o *LogicalPortListUsingGET2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the logical port list using g e t 2 params
func (o *LogicalPortListUsingGET2Params) WithHTTPClient(client *http.Client) *LogicalPortListUsingGET2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the logical port list using g e t 2 params
func (o *LogicalPortListUsingGET2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithResourcePoolName adds the resourcePoolName to the logical port list using g e t 2 params
func (o *LogicalPortListUsingGET2Params) WithResourcePoolName(resourcePoolName *string) *LogicalPortListUsingGET2Params {
	o.SetResourcePoolName(resourcePoolName)
	return o
}

// SetResourcePoolName adds the resourcePoolName to the logical port list using g e t 2 params
func (o *LogicalPortListUsingGET2Params) SetResourcePoolName(resourcePoolName *string) {
	o.ResourcePoolName = resourcePoolName
}

// WriteToRequest writes these params to a swagger request
func (o *LogicalPortListUsingGET2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ResourcePoolName != nil {

		// query param resourcePoolName
		var qrResourcePoolName string
		if o.ResourcePoolName != nil {
			qrResourcePoolName = *o.ResourcePoolName
		}
		qResourcePoolName := qrResourcePoolName
		if qResourcePoolName != "" {
			if err := r.SetQueryParam("resourcePoolName", qResourcePoolName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
