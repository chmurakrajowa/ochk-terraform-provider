// Code generated by go-swagger; DO NOT EDIT.

package dfw_rule_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/models"
)

// ListUsingGET1Reader is a Reader for the ListUsingGET1 structure.
type ListUsingGET1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListUsingGET1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListUsingGET1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListUsingGET1Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListUsingGET1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListUsingGET1NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListUsingGET1OK creates a ListUsingGET1OK with default headers values
func NewListUsingGET1OK() *ListUsingGET1OK {
	return &ListUsingGET1OK{}
}

/*ListUsingGET1OK handles this case with default header values.

OK
*/
type ListUsingGET1OK struct {
	Payload *models.DFWRuleListResponse
}

func (o *ListUsingGET1OK) Error() string {
	return fmt.Sprintf("[GET /nsx/fw/sp/{securityPolicyId}/rules][%d] listUsingGET1OK  %+v", 200, o.Payload)
}

func (o *ListUsingGET1OK) GetPayload() *models.DFWRuleListResponse {
	return o.Payload
}

func (o *ListUsingGET1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DFWRuleListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsingGET1Unauthorized creates a ListUsingGET1Unauthorized with default headers values
func NewListUsingGET1Unauthorized() *ListUsingGET1Unauthorized {
	return &ListUsingGET1Unauthorized{}
}

/*ListUsingGET1Unauthorized handles this case with default header values.

Unauthorized
*/
type ListUsingGET1Unauthorized struct {
}

func (o *ListUsingGET1Unauthorized) Error() string {
	return fmt.Sprintf("[GET /nsx/fw/sp/{securityPolicyId}/rules][%d] listUsingGET1Unauthorized ", 401)
}

func (o *ListUsingGET1Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUsingGET1Forbidden creates a ListUsingGET1Forbidden with default headers values
func NewListUsingGET1Forbidden() *ListUsingGET1Forbidden {
	return &ListUsingGET1Forbidden{}
}

/*ListUsingGET1Forbidden handles this case with default header values.

Forbidden
*/
type ListUsingGET1Forbidden struct {
}

func (o *ListUsingGET1Forbidden) Error() string {
	return fmt.Sprintf("[GET /nsx/fw/sp/{securityPolicyId}/rules][%d] listUsingGET1Forbidden ", 403)
}

func (o *ListUsingGET1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUsingGET1NotFound creates a ListUsingGET1NotFound with default headers values
func NewListUsingGET1NotFound() *ListUsingGET1NotFound {
	return &ListUsingGET1NotFound{}
}

/*ListUsingGET1NotFound handles this case with default header values.

Not Found
*/
type ListUsingGET1NotFound struct {
}

func (o *ListUsingGET1NotFound) Error() string {
	return fmt.Sprintf("[GET /nsx/fw/sp/{securityPolicyId}/rules][%d] listUsingGET1NotFound ", 404)
}

func (o *ListUsingGET1NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
