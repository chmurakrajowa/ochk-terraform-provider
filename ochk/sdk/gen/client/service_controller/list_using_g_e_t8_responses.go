// Code generated by go-swagger; DO NOT EDIT.

package service_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/models"
)

// ListUsingGET8Reader is a Reader for the ListUsingGET8 structure.
type ListUsingGET8Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListUsingGET8Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListUsingGET8OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListUsingGET8Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListUsingGET8Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListUsingGET8NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListUsingGET8OK creates a ListUsingGET8OK with default headers values
func NewListUsingGET8OK() *ListUsingGET8OK {
	return &ListUsingGET8OK{}
}

/*ListUsingGET8OK handles this case with default header values.

OK
*/
type ListUsingGET8OK struct {
	Payload *models.ServiceListResponse
}

func (o *ListUsingGET8OK) Error() string {
	return fmt.Sprintf("[GET /nsx/cs/][%d] listUsingGET8OK  %+v", 200, o.Payload)
}

func (o *ListUsingGET8OK) GetPayload() *models.ServiceListResponse {
	return o.Payload
}

func (o *ListUsingGET8OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsingGET8Unauthorized creates a ListUsingGET8Unauthorized with default headers values
func NewListUsingGET8Unauthorized() *ListUsingGET8Unauthorized {
	return &ListUsingGET8Unauthorized{}
}

/*ListUsingGET8Unauthorized handles this case with default header values.

Unauthorized
*/
type ListUsingGET8Unauthorized struct {
}

func (o *ListUsingGET8Unauthorized) Error() string {
	return fmt.Sprintf("[GET /nsx/cs/][%d] listUsingGET8Unauthorized ", 401)
}

func (o *ListUsingGET8Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUsingGET8Forbidden creates a ListUsingGET8Forbidden with default headers values
func NewListUsingGET8Forbidden() *ListUsingGET8Forbidden {
	return &ListUsingGET8Forbidden{}
}

/*ListUsingGET8Forbidden handles this case with default header values.

Forbidden
*/
type ListUsingGET8Forbidden struct {
}

func (o *ListUsingGET8Forbidden) Error() string {
	return fmt.Sprintf("[GET /nsx/cs/][%d] listUsingGET8Forbidden ", 403)
}

func (o *ListUsingGET8Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUsingGET8NotFound creates a ListUsingGET8NotFound with default headers values
func NewListUsingGET8NotFound() *ListUsingGET8NotFound {
	return &ListUsingGET8NotFound{}
}

/*ListUsingGET8NotFound handles this case with default header values.

Not Found
*/
type ListUsingGET8NotFound struct {
}

func (o *ListUsingGET8NotFound) Error() string {
	return fmt.Sprintf("[GET /nsx/cs/][%d] listUsingGET8NotFound ", 404)
}

func (o *ListUsingGET8NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
