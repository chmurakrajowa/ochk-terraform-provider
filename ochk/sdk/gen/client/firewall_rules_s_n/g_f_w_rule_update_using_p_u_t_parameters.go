// Code generated by go-swagger; DO NOT EDIT.

package firewall_rules_s_n

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// NewGFWRuleUpdateUsingPUTParams creates a new GFWRuleUpdateUsingPUTParams object
// with the default values initialized.
func NewGFWRuleUpdateUsingPUTParams() *GFWRuleUpdateUsingPUTParams {
	var ()
	return &GFWRuleUpdateUsingPUTParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGFWRuleUpdateUsingPUTParamsWithTimeout creates a new GFWRuleUpdateUsingPUTParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGFWRuleUpdateUsingPUTParamsWithTimeout(timeout time.Duration) *GFWRuleUpdateUsingPUTParams {
	var ()
	return &GFWRuleUpdateUsingPUTParams{

		timeout: timeout,
	}
}

// NewGFWRuleUpdateUsingPUTParamsWithContext creates a new GFWRuleUpdateUsingPUTParams object
// with the default values initialized, and the ability to set a context for a request
func NewGFWRuleUpdateUsingPUTParamsWithContext(ctx context.Context) *GFWRuleUpdateUsingPUTParams {
	var ()
	return &GFWRuleUpdateUsingPUTParams{

		Context: ctx,
	}
}

// NewGFWRuleUpdateUsingPUTParamsWithHTTPClient creates a new GFWRuleUpdateUsingPUTParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGFWRuleUpdateUsingPUTParamsWithHTTPClient(client *http.Client) *GFWRuleUpdateUsingPUTParams {
	var ()
	return &GFWRuleUpdateUsingPUTParams{
		HTTPClient: client,
	}
}

/*GFWRuleUpdateUsingPUTParams contains all the parameters to send to the API endpoint
for the g f w rule update using p u t operation typically these are written to a http.Request
*/
type GFWRuleUpdateUsingPUTParams struct {

	/*GatewayPolicyID
	  gatewayPolicyId

	*/
	GatewayPolicyID string
	/*GfwRule
	  gfwRule

	*/
	GfwRule *models.GFWRule
	/*RuleID
	  ruleId

	*/
	RuleID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the g f w rule update using p u t params
func (o *GFWRuleUpdateUsingPUTParams) WithTimeout(timeout time.Duration) *GFWRuleUpdateUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the g f w rule update using p u t params
func (o *GFWRuleUpdateUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the g f w rule update using p u t params
func (o *GFWRuleUpdateUsingPUTParams) WithContext(ctx context.Context) *GFWRuleUpdateUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the g f w rule update using p u t params
func (o *GFWRuleUpdateUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the g f w rule update using p u t params
func (o *GFWRuleUpdateUsingPUTParams) WithHTTPClient(client *http.Client) *GFWRuleUpdateUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the g f w rule update using p u t params
func (o *GFWRuleUpdateUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGatewayPolicyID adds the gatewayPolicyID to the g f w rule update using p u t params
func (o *GFWRuleUpdateUsingPUTParams) WithGatewayPolicyID(gatewayPolicyID string) *GFWRuleUpdateUsingPUTParams {
	o.SetGatewayPolicyID(gatewayPolicyID)
	return o
}

// SetGatewayPolicyID adds the gatewayPolicyId to the g f w rule update using p u t params
func (o *GFWRuleUpdateUsingPUTParams) SetGatewayPolicyID(gatewayPolicyID string) {
	o.GatewayPolicyID = gatewayPolicyID
}

// WithGfwRule adds the gfwRule to the g f w rule update using p u t params
func (o *GFWRuleUpdateUsingPUTParams) WithGfwRule(gfwRule *models.GFWRule) *GFWRuleUpdateUsingPUTParams {
	o.SetGfwRule(gfwRule)
	return o
}

// SetGfwRule adds the gfwRule to the g f w rule update using p u t params
func (o *GFWRuleUpdateUsingPUTParams) SetGfwRule(gfwRule *models.GFWRule) {
	o.GfwRule = gfwRule
}

// WithRuleID adds the ruleID to the g f w rule update using p u t params
func (o *GFWRuleUpdateUsingPUTParams) WithRuleID(ruleID string) *GFWRuleUpdateUsingPUTParams {
	o.SetRuleID(ruleID)
	return o
}

// SetRuleID adds the ruleId to the g f w rule update using p u t params
func (o *GFWRuleUpdateUsingPUTParams) SetRuleID(ruleID string) {
	o.RuleID = ruleID
}

// WriteToRequest writes these params to a swagger request
func (o *GFWRuleUpdateUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param gatewayPolicyId
	if err := r.SetPathParam("gatewayPolicyId", o.GatewayPolicyID); err != nil {
		return err
	}

	if o.GfwRule != nil {
		if err := r.SetBodyParam(o.GfwRule); err != nil {
			return err
		}
	}

	// path param ruleId
	if err := r.SetPathParam("ruleId", o.RuleID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
