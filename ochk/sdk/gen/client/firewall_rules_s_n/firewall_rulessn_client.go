// Code generated by go-swagger; DO NOT EDIT.

package firewall_rules_s_n

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new firewall rules s n API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for firewall rules s n API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GFWRuleCreateUsingPUT(params *GFWRuleCreateUsingPUTParams) (*GFWRuleCreateUsingPUTOK, *GFWRuleCreateUsingPUTCreated, error)

	GFWRuleDeleteUsingDELETE(params *GFWRuleDeleteUsingDELETEParams) (*GFWRuleDeleteUsingDELETEOK, error)

	GFWRuleGetUsingGET(params *GFWRuleGetUsingGETParams) (*GFWRuleGetUsingGETOK, error)

	GFWRuleListUsingGET(params *GFWRuleListUsingGETParams) (*GFWRuleListUsingGETOK, error)

	GFWRuleUpdateUsingPUT(params *GFWRuleUpdateUsingPUTParams) (*GFWRuleUpdateUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GFWRuleCreateUsingPUT creates

  Create firewall rule (south-north) in NSX-T
*/
func (a *Client) GFWRuleCreateUsingPUT(params *GFWRuleCreateUsingPUTParams) (*GFWRuleCreateUsingPUTOK, *GFWRuleCreateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGFWRuleCreateUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GFWRuleCreateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/network/firewall/gateway-policies/{gatewayPolicyId}/rules/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GFWRuleCreateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GFWRuleCreateUsingPUTOK:
		return value, nil, nil
	case *GFWRuleCreateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for firewall_rules_s_n: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GFWRuleDeleteUsingDELETE deletes

  Delete firewall rule (south-north) from NSX-T
*/
func (a *Client) GFWRuleDeleteUsingDELETE(params *GFWRuleDeleteUsingDELETEParams) (*GFWRuleDeleteUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGFWRuleDeleteUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GFWRuleDeleteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/network/firewall/gateway-policies/{gatewayPolicyId}/rules/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GFWRuleDeleteUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GFWRuleDeleteUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GFWRuleDeleteUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GFWRuleGetUsingGET gets

  Get firewall rule (south-north) from NSX-T
*/
func (a *Client) GFWRuleGetUsingGET(params *GFWRuleGetUsingGETParams) (*GFWRuleGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGFWRuleGetUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GFWRuleGetUsingGET",
		Method:             "GET",
		PathPattern:        "/network/firewall/gateway-policies/{gatewayPolicyId}/rules/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GFWRuleGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GFWRuleGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GFWRuleGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GFWRuleListUsingGET lists

  List firewall rules (south-north) from NSX-T
*/
func (a *Client) GFWRuleListUsingGET(params *GFWRuleListUsingGETParams) (*GFWRuleListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGFWRuleListUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GFWRuleListUsingGET",
		Method:             "GET",
		PathPattern:        "/network/firewall/gateway-policies/{gatewayPolicyId}/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GFWRuleListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GFWRuleListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GFWRuleListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GFWRuleUpdateUsingPUT updates

  Create firewall rule (south-north) in NSX-T
*/
func (a *Client) GFWRuleUpdateUsingPUT(params *GFWRuleUpdateUsingPUTParams) (*GFWRuleUpdateUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGFWRuleUpdateUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GFWRuleUpdateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/network/firewall/gateway-policies/{gatewayPolicyId}/rules/{ruleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GFWRuleUpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GFWRuleUpdateUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GFWRuleUpdateUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
