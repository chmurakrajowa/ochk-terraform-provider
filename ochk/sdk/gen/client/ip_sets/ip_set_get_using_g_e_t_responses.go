// Code generated by go-swagger; DO NOT EDIT.

package ip_sets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/chmurakrajowa/terraform-provider-ochk/ochk/sdk/gen/models"
)

// IPSetGetUsingGETReader is a Reader for the IPSetGetUsingGET structure.
type IPSetGetUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IPSetGetUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIPSetGetUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewIPSetGetUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewIPSetGetUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewIPSetGetUsingGETOK creates a IPSetGetUsingGETOK with default headers values
func NewIPSetGetUsingGETOK() *IPSetGetUsingGETOK {
	return &IPSetGetUsingGETOK{}
}

/*IPSetGetUsingGETOK handles this case with default header values.

OK
*/
type IPSetGetUsingGETOK struct {
	Payload *models.IPSetGetResponse
}

func (o *IPSetGetUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /network/ipsets/{ipSetId}][%d] ipSetGetUsingGETOK  %+v", 200, o.Payload)
}

func (o *IPSetGetUsingGETOK) GetPayload() *models.IPSetGetResponse {
	return o.Payload
}

func (o *IPSetGetUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IPSetGetResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIPSetGetUsingGETBadRequest creates a IPSetGetUsingGETBadRequest with default headers values
func NewIPSetGetUsingGETBadRequest() *IPSetGetUsingGETBadRequest {
	return &IPSetGetUsingGETBadRequest{}
}

/*IPSetGetUsingGETBadRequest handles this case with default header values.

Bad request, error occurred. For more details see log messages.
*/
type IPSetGetUsingGETBadRequest struct {
}

func (o *IPSetGetUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /network/ipsets/{ipSetId}][%d] ipSetGetUsingGETBadRequest ", 400)
}

func (o *IPSetGetUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIPSetGetUsingGETNotFound creates a IPSetGetUsingGETNotFound with default headers values
func NewIPSetGetUsingGETNotFound() *IPSetGetUsingGETNotFound {
	return &IPSetGetUsingGETNotFound{}
}

/*IPSetGetUsingGETNotFound handles this case with default header values.

Entity not found.
*/
type IPSetGetUsingGETNotFound struct {
}

func (o *IPSetGetUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /network/ipsets/{ipSetId}][%d] ipSetGetUsingGETNotFound ", 404)
}

func (o *IPSetGetUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
