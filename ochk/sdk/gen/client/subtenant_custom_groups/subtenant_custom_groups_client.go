// Code generated by go-swagger; DO NOT EDIT.

package subtenant_custom_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new subtenant custom groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subtenant custom groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	MemberCreateUsingPUT(params *MemberCreateUsingPUTParams) (*MemberCreateUsingPUTOK, *MemberCreateUsingPUTCreated, error)

	MemberDeleteUsingDELETE(params *MemberDeleteUsingDELETEParams) (*MemberDeleteUsingDELETEOK, error)

	MemberGetUsingGET(params *MemberGetUsingGETParams) (*MemberGetUsingGETOK, error)

	MemberListUsingGET(params *MemberListUsingGETParams) (*MemberListUsingGETOK, error)

	SubtenantGroupGetUsingGET(params *SubtenantGroupGetUsingGETParams) (*SubtenantGroupGetUsingGETOK, error)

	SubtenantGroupListUsingGET(params *SubtenantGroupListUsingGETParams) (*SubtenantGroupListUsingGETOK, error)

	SubtenantGroupUpdateUsingPUT(params *SubtenantGroupUpdateUsingPUTParams) (*SubtenantGroupUpdateUsingPUTOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  MemberCreateUsingPUT creates

  Add member of custom group in vRealize Automation
*/
func (a *Client) MemberCreateUsingPUT(params *MemberCreateUsingPUTParams) (*MemberCreateUsingPUTOK, *MemberCreateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMemberCreateUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "memberCreateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/subtenants/{subtenantId}/groups/{groupId}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MemberCreateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *MemberCreateUsingPUTOK:
		return value, nil, nil
	case *MemberCreateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subtenant_custom_groups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MemberDeleteUsingDELETE deletes

  Delete member of custom group from vRealize Automation
*/
func (a *Client) MemberDeleteUsingDELETE(params *MemberDeleteUsingDELETEParams) (*MemberDeleteUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMemberDeleteUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "memberDeleteUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/subtenants/{subtenantId}/groups/{groupId}/members/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MemberDeleteUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MemberDeleteUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for memberDeleteUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MemberGetUsingGET gets

  Get IAAS API group member
*/
func (a *Client) MemberGetUsingGET(params *MemberGetUsingGETParams) (*MemberGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMemberGetUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "memberGetUsingGET",
		Method:             "GET",
		PathPattern:        "/subtenants/{subtenantId}/groups/{groupId}/members/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MemberGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MemberGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for memberGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  MemberListUsingGET lists

  List IAAS API group members
*/
func (a *Client) MemberListUsingGET(params *MemberListUsingGETParams) (*MemberListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMemberListUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "memberListUsingGET",
		Method:             "GET",
		PathPattern:        "/subtenants/{subtenantId}/groups/{groupId}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MemberListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MemberListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for memberListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubtenantGroupGetUsingGET gets

  Get custom groups for subtenant
*/
func (a *Client) SubtenantGroupGetUsingGET(params *SubtenantGroupGetUsingGETParams) (*SubtenantGroupGetUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubtenantGroupGetUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "subtenantGroupGetUsingGET",
		Method:             "GET",
		PathPattern:        "/subtenants/{subtenantId}/groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SubtenantGroupGetUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubtenantGroupGetUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subtenantGroupGetUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubtenantGroupListUsingGET lists

  List custom groups for subtenant
*/
func (a *Client) SubtenantGroupListUsingGET(params *SubtenantGroupListUsingGETParams) (*SubtenantGroupListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubtenantGroupListUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "subtenantGroupListUsingGET",
		Method:             "GET",
		PathPattern:        "/subtenants/{subtenantId}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SubtenantGroupListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubtenantGroupListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subtenantGroupListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SubtenantGroupUpdateUsingPUT updates

  Update custom group membership in vRealize Automation
*/
func (a *Client) SubtenantGroupUpdateUsingPUT(params *SubtenantGroupUpdateUsingPUTParams) (*SubtenantGroupUpdateUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubtenantGroupUpdateUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "subtenantGroupUpdateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/subtenants/{subtenantId}/groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SubtenantGroupUpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubtenantGroupUpdateUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for subtenantGroupUpdateUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
