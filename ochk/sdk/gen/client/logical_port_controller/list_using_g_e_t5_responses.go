// Code generated by go-swagger; DO NOT EDIT.

package logical_port_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/models"
)

// ListUsingGET5Reader is a Reader for the ListUsingGET5 structure.
type ListUsingGET5Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListUsingGET5Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListUsingGET5OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListUsingGET5Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListUsingGET5Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListUsingGET5NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListUsingGET5OK creates a ListUsingGET5OK with default headers values
func NewListUsingGET5OK() *ListUsingGET5OK {
	return &ListUsingGET5OK{}
}

/*ListUsingGET5OK handles this case with default header values.

OK
*/
type ListUsingGET5OK struct {
	Payload *models.LogicalPortListResponse
}

func (o *ListUsingGET5OK) Error() string {
	return fmt.Sprintf("[GET /nsx/lp/][%d] listUsingGET5OK  %+v", 200, o.Payload)
}

func (o *ListUsingGET5OK) GetPayload() *models.LogicalPortListResponse {
	return o.Payload
}

func (o *ListUsingGET5OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogicalPortListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsingGET5Unauthorized creates a ListUsingGET5Unauthorized with default headers values
func NewListUsingGET5Unauthorized() *ListUsingGET5Unauthorized {
	return &ListUsingGET5Unauthorized{}
}

/*ListUsingGET5Unauthorized handles this case with default header values.

Unauthorized
*/
type ListUsingGET5Unauthorized struct {
}

func (o *ListUsingGET5Unauthorized) Error() string {
	return fmt.Sprintf("[GET /nsx/lp/][%d] listUsingGET5Unauthorized ", 401)
}

func (o *ListUsingGET5Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUsingGET5Forbidden creates a ListUsingGET5Forbidden with default headers values
func NewListUsingGET5Forbidden() *ListUsingGET5Forbidden {
	return &ListUsingGET5Forbidden{}
}

/*ListUsingGET5Forbidden handles this case with default header values.

Forbidden
*/
type ListUsingGET5Forbidden struct {
}

func (o *ListUsingGET5Forbidden) Error() string {
	return fmt.Sprintf("[GET /nsx/lp/][%d] listUsingGET5Forbidden ", 403)
}

func (o *ListUsingGET5Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewListUsingGET5NotFound creates a ListUsingGET5NotFound with default headers values
func NewListUsingGET5NotFound() *ListUsingGET5NotFound {
	return &ListUsingGET5NotFound{}
}

/*ListUsingGET5NotFound handles this case with default header values.

Not Found
*/
type ListUsingGET5NotFound struct {
}

func (o *ListUsingGET5NotFound) Error() string {
	return fmt.Sprintf("[GET /nsx/lp/][%d] listUsingGET5NotFound ", 404)
}

func (o *ListUsingGET5NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
