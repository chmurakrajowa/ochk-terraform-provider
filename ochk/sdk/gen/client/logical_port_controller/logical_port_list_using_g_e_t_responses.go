// Code generated by go-swagger; DO NOT EDIT.

package logical_port_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ochk/terraform-provider-ochk/ochk/sdk/gen/models"
)

// LogicalPortListUsingGETReader is a Reader for the LogicalPortListUsingGET structure.
type LogicalPortListUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LogicalPortListUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLogicalPortListUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewLogicalPortListUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLogicalPortListUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLogicalPortListUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewLogicalPortListUsingGETOK creates a LogicalPortListUsingGETOK with default headers values
func NewLogicalPortListUsingGETOK() *LogicalPortListUsingGETOK {
	return &LogicalPortListUsingGETOK{}
}

/*LogicalPortListUsingGETOK handles this case with default header values.

OK
*/
type LogicalPortListUsingGETOK struct {
	Payload *models.LogicalPortListResponse
}

func (o *LogicalPortListUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /nsx/lp/][%d] logicalPortListUsingGETOK  %+v", 200, o.Payload)
}

func (o *LogicalPortListUsingGETOK) GetPayload() *models.LogicalPortListResponse {
	return o.Payload
}

func (o *LogicalPortListUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogicalPortListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogicalPortListUsingGETUnauthorized creates a LogicalPortListUsingGETUnauthorized with default headers values
func NewLogicalPortListUsingGETUnauthorized() *LogicalPortListUsingGETUnauthorized {
	return &LogicalPortListUsingGETUnauthorized{}
}

/*LogicalPortListUsingGETUnauthorized handles this case with default header values.

Unauthorized
*/
type LogicalPortListUsingGETUnauthorized struct {
}

func (o *LogicalPortListUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /nsx/lp/][%d] logicalPortListUsingGETUnauthorized ", 401)
}

func (o *LogicalPortListUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLogicalPortListUsingGETForbidden creates a LogicalPortListUsingGETForbidden with default headers values
func NewLogicalPortListUsingGETForbidden() *LogicalPortListUsingGETForbidden {
	return &LogicalPortListUsingGETForbidden{}
}

/*LogicalPortListUsingGETForbidden handles this case with default header values.

Forbidden
*/
type LogicalPortListUsingGETForbidden struct {
}

func (o *LogicalPortListUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /nsx/lp/][%d] logicalPortListUsingGETForbidden ", 403)
}

func (o *LogicalPortListUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLogicalPortListUsingGETNotFound creates a LogicalPortListUsingGETNotFound with default headers values
func NewLogicalPortListUsingGETNotFound() *LogicalPortListUsingGETNotFound {
	return &LogicalPortListUsingGETNotFound{}
}

/*LogicalPortListUsingGETNotFound handles this case with default header values.

Not Found
*/
type LogicalPortListUsingGETNotFound struct {
}

func (o *LogicalPortListUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /nsx/lp/][%d] logicalPortListUsingGETNotFound ", 404)
}

func (o *LogicalPortListUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
