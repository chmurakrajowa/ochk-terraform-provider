// Code generated by go-swagger; DO NOT EDIT.

package network_adapters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewNetworkAdapterListUsingGETParams creates a new NetworkAdapterListUsingGETParams object
// with the default values initialized.
func NewNetworkAdapterListUsingGETParams() *NetworkAdapterListUsingGETParams {
	var ()
	return &NetworkAdapterListUsingGETParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewNetworkAdapterListUsingGETParamsWithTimeout creates a new NetworkAdapterListUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewNetworkAdapterListUsingGETParamsWithTimeout(timeout time.Duration) *NetworkAdapterListUsingGETParams {
	var ()
	return &NetworkAdapterListUsingGETParams{

		timeout: timeout,
	}
}

// NewNetworkAdapterListUsingGETParamsWithContext creates a new NetworkAdapterListUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewNetworkAdapterListUsingGETParamsWithContext(ctx context.Context) *NetworkAdapterListUsingGETParams {
	var ()
	return &NetworkAdapterListUsingGETParams{

		Context: ctx,
	}
}

// NewNetworkAdapterListUsingGETParamsWithHTTPClient creates a new NetworkAdapterListUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewNetworkAdapterListUsingGETParamsWithHTTPClient(client *http.Client) *NetworkAdapterListUsingGETParams {
	var ()
	return &NetworkAdapterListUsingGETParams{
		HTTPClient: client,
	}
}

/*NetworkAdapterListUsingGETParams contains all the parameters to send to the API endpoint
for the network adapter list using g e t operation typically these are written to a http.Request
*/
type NetworkAdapterListUsingGETParams struct {

	/*DisplayName
	  displayName

	*/
	DisplayName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the network adapter list using g e t params
func (o *NetworkAdapterListUsingGETParams) WithTimeout(timeout time.Duration) *NetworkAdapterListUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the network adapter list using g e t params
func (o *NetworkAdapterListUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the network adapter list using g e t params
func (o *NetworkAdapterListUsingGETParams) WithContext(ctx context.Context) *NetworkAdapterListUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the network adapter list using g e t params
func (o *NetworkAdapterListUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the network adapter list using g e t params
func (o *NetworkAdapterListUsingGETParams) WithHTTPClient(client *http.Client) *NetworkAdapterListUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the network adapter list using g e t params
func (o *NetworkAdapterListUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDisplayName adds the displayName to the network adapter list using g e t params
func (o *NetworkAdapterListUsingGETParams) WithDisplayName(displayName *string) *NetworkAdapterListUsingGETParams {
	o.SetDisplayName(displayName)
	return o
}

// SetDisplayName adds the displayName to the network adapter list using g e t params
func (o *NetworkAdapterListUsingGETParams) SetDisplayName(displayName *string) {
	o.DisplayName = displayName
}

// WriteToRequest writes these params to a swagger request
func (o *NetworkAdapterListUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DisplayName != nil {

		// query param displayName
		var qrDisplayName string
		if o.DisplayName != nil {
			qrDisplayName = *o.DisplayName
		}
		qDisplayName := qrDisplayName
		if qDisplayName != "" {
			if err := r.SetQueryParam("displayName", qDisplayName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
